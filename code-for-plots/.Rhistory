legend = c("Mean", "Uncertainty", "Data"), bty = "n",
cex  = 0.8)
imp = (y_obs - m)/sqrt(v0 + v_obs)
## imp plot
plot(x2, imp, type = "l", ylim = c(0, 4.5), xlim = c(0,1),
main = "Implausibility", ylab = "I(x)", col = NULL)
indices = 1:breaks[1]
imp2_all = rep(NA, length(x2))
imp2 = imp[indices]
imp2_all[indices] = imp[indices]
lines(x2[indices][imp2 < 3], imp2[imp2 < 3], col = "green")
lines(x2[indices][imp2 >= 3], imp2[imp2 >= 3], col = "red")
indices = (1 + breaks[1]):breaks[2]
imp2 = imp[indices]
imp2_all[indices] = imp[indices]
lines(x2[indices][imp2 < 3], imp2[imp2 < 3], col = "green")
lines(x2[indices][imp2 >= 3], imp2[imp2 >= 3], col = "red")
indices = -(1:breaks[2])
imp2 = imp[indices]
imp2_all[indices] = imp[indices]
lines(x2[indices][imp2 < 3], imp2[imp2 < 3], col = "green")
lines(x2[indices][imp2 >= 3], imp2[imp2 >= 3], col = "red")
abline(h = 3, lwd = 3)
legend("bottomleft", col = c("black", "red", "green"), lty = rep(1, 3),
legend = c("Cut off", "Implausible", "NROY"), bty = "n",
cex  = 0.8)
mean(imp < 3)
mean(imp2 < 3)
## wave 2
mean(imp2_all < 3)
mean(imp2_all < 3)*mean(imp < 3)
100 * mean(imp2_all < 3)*mean(imp < 3)
rm(list = ls())
x = vector(1000)
x = vector(length = 1000)
x
x = vector(length = 1000)
x[1] = rnorm(1)
for(i in 2:1000) {
x[i] = 0.8*x[i-1] + rnorm(1)
}
plot(ts(x))
acf(x)
plot(x[-1], x[-1000])
plot(diff(x))
plot(x)
plot(diff(x))
plot(diff(diff(x)))
acf(diff(x))
x = vector(length = 1000)
x[1] = rnorm(1)
for(i in 2:1000) {
x[i] = x[i-1] + rnorm(1)
}
plot(ts(x))
acf(x)
plot(x[-1], x[-1000])
plot(diff(x))
plot(x)
plot(diff(x))
plot(diff(diff(x)))
acf(diff(x))
x = vector(length = 1000)
x[1] = rnorm(1)
for(i in 2:1000) {
x[i] = x[i-1] + rnorm(1)
}
plot(ts(x))
acf(x)
plot(x[-1], x[-1000])
plot(diff(x))
plot(x)
plot(diff(x))
plot(diff(diff(x)))
acf(diff(x))
x = vector(length = 1000)
x[1] = rnorm(1)
for(i in 2:1000) {
x[i] = 0.9*x[i-1] + rnorm(1)
}
plot(ts(x))
acf(x)
plot(x[-1], x[-1000])
plot(diff(x))
plot(x)
plot(diff(x))
plot(diff(diff(x)))
acf(diff(x))
plot(x[-1], x[-1000])
plot(x[-c(1,2)], x[-c(999,1000)])
plot(x[-c(1,2,3)], x[-c(1998,999,1000)])
plot(x[-c(1,2,3)], x[-c(998,999,1000)])
## make a covariance matrix for an AR(1) process ...
set.seed(1)
n = 1000
sig = 1
rho = 0.8
K = diag(sig, n)
abs(row(k) - col(k))
abs(row(K) - col(K))
row(K#)
row(K)
## make a covariance matrix for an AR(1) process ...
set.seed(1)
n = 1000
sig = 1
rho = 0.8
K = diag(sig, n)
K[abs(row(k) - col(k)) == 1] = rho
## make a covariance matrix for an AR(1) process ...
set.seed(1)
n = 1000
sig = 1
rho = 0.8
K = diag(sig, n)
K[abs(row(K) - col(K)) == 1] = rho
K
head(K)
K[1:5, 1:5]
K_chol = chol(K)
K
chol(K)
## make a covariance matrix for an AR(1) process ...
set.seed(1)
n = 1000
sig = 1 + 0.1
rho = 0.8
K = diag(sig, n)
K[abs(row(K) - col(K)) == 1] = rho
K_chol = chol(K)
## make a covariance matrix for an AR(1) process ...
set.seed(1)
n = 1000
sig = 2
rho = 0.8
K = diag(sig, n)
K[abs(row(K) - col(K)) == 1] = rho
K_chol = chol(K)
K_chol
cov2cor(K)
K_chol[1:3, 1:3]
K_chol = t(chol(K))
plot(ts(K_chol %*% rnorm(n)))
## make a covariance matrix for an AR(1) process ...
set.seed(1)
n = 1000
sig = 1
rho = 0.8
K = diag(sig, n)
K[abs(row(K) - col(K)) == 1] = rho
K_chol = t(chol(K))
plot(ts(K_chol %*% rnorm(n)))
## make a covariance matrix for an AR(1) process ...
set.seed(1)
n = 1000
sig = 1.5
rho = 0.8
K = diag(sig, n)
K[abs(row(K) - col(K)) == 1] = rho
K_chol = t(chol(K))
plot(ts(K_chol %*% rnorm(n)))
plot(ts(rnorm(n)))
plot(ts(K_chol %*% rnorm(n)))
plot(ts(rnorm(n)))
citation("SHELF")
install.packages("SHELF")
install.packages("SHELF")
citation("SHELF")
SHELF::elicit()
SHELF::elicit()
SHELF::elicit()
install.packages("hmer")
SHELF::elicit()
L = 5
U = 10
sig = (U-L)/3
mu = (U+L)/2
sig
hist(rnor(1000,mu,sig))
hist(rnorm(1000,mu,sig))
mean(rnorm(1000,mu,sig) > L)
mean(rnorm(1000,mu,sig)  < U)
mu = (L+U)/2
sig = (U - mu)/3
X = rnorm(100000, mu, sig)
hist(X)
mean(X < U & X > L)
sig = (U - mu)/2
X = rnorm(100000, mu, sig)
hist(X)
mean(X < U & X > L)
install.packages("tidyRSS")
tidyRSS::tidyfeed("http://fivethirtyeight.com/all/feed")
x0 = tidyRSS::tidyfeed("http://fivethirtyeight.com/all/feed")
x0
view(x0)
View(x0)
x0 = tidyRSS::tidyfeed("https://t.co/kbHYpnyMwq")
x0
dim(x0)
x0$feed_description
View(x0)
f
f  = function(x) 3()
f
f(1)
f(2)
f()
f = (function(x) 3)()
d
f
f()
f
f(1)
function(x) 3()
(function(x) 3)
(function(x) 3)()
c(T, F)  & c(NA, NA)
FALSE == NA
FALSE & NA
beepr::beep
play_file
beepr:::play_file
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Atmosphere 00.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Horror Intro.wav.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Hiting And Scraping Objects.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Sneaking Piano.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Door Slam.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Creature 1.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Creature 2.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Creature 3.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Creature 4.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Creature 5.wav")
beepr:::play_file("~/Music/99Sounds Halloween Sound Effects/Sound Effects/Sub Rumble.wav")
beepr:::play_file("~/Music/clipped/Creature1-16bit.wav")
beepr:::play_file("~/Music/clipped/Creature1-9bit.wav")
beepr:::play_file("~/Music/clipped/Creature1-8bit.wav")
beepr:::play_file("~/Music/clipped/piano.wav")
ggplot2::`+`
ggplot2:::absoluteGrob()`+`
ggplot2:::`+`
x
d <- tibble(
x = runif(40)
)
d %>% mutate(y=  3*x - x^2 + rnorm(40))
library(tidyverse)
d <- tibble(
x = runif(40)
)
d %>% mutate(y=  3*x - x^2 + rnorm(40))
p1 <- ggplot2::ggplot(
ggplot2:::aes(x = x, y = y)
)
p1 <- ggplot2::ggplot(
data = d, ggplot2:::aes(x = x, y = y)
)
ggplot2:::`%+%`(p1,  ggplot2::geom_point())
p1
d %>% mutate(y =  3*x - x^2 + rnorm(40))
p1 <- ggplot2::ggplot(
data = d, ggplot2:::aes(x = x, y = y)
)
ggplot2:::`%+%`(p1,  ggplot2::geom_point())
d = d %>% mutate(y =  3*x - x^2 + rnorm(40))
p1 <- ggplot2::ggplot(
data = d, ggplot2:::aes(x = x, y = y)
)
ggplot2:::`%+%`(p1,  ggplot2::geom_point())
ggplot2:::`%+%`(
ggplot2:::`%+%`(p1,  ggplot2::geom_point()),
ggplot2::geom_smooth())
sample(x[x>9]) %>% length()
x=1:10
sample(x[x>9]) %>% length()
sample(x[x>9])
sample(x[x>9])
sample(x[x>9])
x[x>9]
sample(10)
sample(6)
rm(list=ls())
creepr::creepr()
creepr::creepr()
remove.packages("creepr")
remove.packages("beepr")
beepr::beep()
devtools::install_github("https://github.com/jcken95/creepr")
creepr::creepr()
x=1:30
plot(x, factorial(x))
plot(x, cumsum(log(j))
plot(x, cumsum(log(x)))
plot(x, log(cumsum(log(x))))
x-1:100
x=1:100
plot(x, log(cumsum(log(x))))
x=1:1000
plot(x, log(cumsum(log(x))))
x=1:10000
plot(x, log(cumsum(log(x))))
x=1:1000000
plot(x, log(cumsum(log(x))))
!1
!1 + 1
1 + !1
1
!1
1 + FALSE
1 + TRUE
FALSE
FALSE + 1
1 + !1
1 + FALSE
1 + TRUE
FALSE + !
1
FALSE + 1
1 + !1; !1 + 1
SHELF::elicit()
beta <- MASS::mvrnorm(1000, c(0,0), diag(100,2))
beta
set.seed(123)
beta <- MASS::mvrnorm(n, c(0,0), diag(100,2))
X <- cbind(1, runif(n))
set.seed(123)
n <- 10^4
beta <- MASS::mvrnorm(n, c(0,0), diag(100,2))
X <- cbind(1, runif(n))
lin_pred <- X %*% beta
lin_pred <- X %*% t(beta)
lin_pred
dim(lin_pred)
dim(X)
dim(beta)
set.seed(123)
n <- 10^4
beta <- MASS::mvrnorm(n, c(0,0), diag(100,2))
X <- rbind(1, runif(n))
lin_pred <- (X) %*% (beta)
lin_pred
set.seed(123)
n <- 10^4
beta <- MASS::mvrnorm(n, c(0,0), diag(100,2))
X <- cbind(1, runif(n))
head(X)
dim(beta)
set.seed(123)
n <- 10^4 # num MC draws
m <- 100  # num data samples
beta <- MASS::mvrnorm(n, c(0,0), diag(100,2))
X <- cbind(1, runif(m))
lin_pred <- (X) %*% (beta)
dim(X)
dim(beta)
set.seed(123)
n <- 10^4 # num MC draws
m <- 100  # num data samples
beta <- MASS::mvrnorm(n, c(0,0), diag(100,2))
X <- cbind(1, runif(m))
lin_pred <- (X) %*% t(beta)
lin_pred
beepr::beep()
beepr::beep()
beepr::beep()
x <- sample(0:1, 1000, replace = FALSE)
x <- sample(0:1, 1000, replace = FALSE)
x <- sample(0:1, 1000, replace = TRUE)
x
plot(cumsum(x)/1:1000)
plot(cumsum(x)/1:1000, type = "l")
aline(h = 0.5)
abline(h = 0.5)
x <- sample(0:1, 1000, replace = TRUE)
plot(cumsum(x)/1:1000, type = "l")
abline(h = 0.5)
x <- sample(0:1, 1000, replace = TRUE)
plot(cumsum(x)/1:1000, type = "l")
abline(h = 0.5)
x <- sample(0:1, 1000, replace = TRUE)
plot(cumsum(x)/1:1000, type = "l")
abline(h = 0.5)
x <- sample(0:1, 1000, replace = TRUE)
plot(cumsum(x)/1:1000, type = "l")
abline(h = 0.5)
n <- 10^5
x <- sample(0:1, n, replace = TRUE)
plot(cumsum(x)/1:n, type = "l")
abline(h = 0.5)
n <- 10^5
x <- sample(0:1, n, replace = TRUE)
plot(cumsum(x)/1:n, type = "l")
abline(h = 0.5)
n <- 10^5
x <- sample(0:1, n, replace = TRUE)
plot(cumsum(x)/1:n, type = "l")
abline(h = 0.5)
n <- 10^4
x <- sample(0:1, n, replace = TRUE)
plot(cumsum(x)/1:n, type = "l")
abline(h = 0.5)
n <- 10^4
x <- sample(0:1, n, replace = TRUE)
plot(cumsum(x)/1:n, type = "l")
abline(h = 0.5)
n <- 10^4
x <- sample(0:1, n, replace = TRUE)
plot(cumsum(x)/1:n, type = "l")
abline(h = 0.5)
n <- 10^4
x <- sample(0:1, n, replace = TRUE)
plot(cumsum(x)/1:n, type = "l")
abline(h = 0.5)
n <- 10^4
x <- sample(0:1, n, replace = TRUE)
plot(cumsum(x)/1:n, type = "l")
abline(h = 0.5)
se <- sqrt(cumsum(x) * cumsum(1 - x) / 1:n)
se
se <- sqrt(cumsum(x) * cumsum(1 - x) / 1:n)/sqrt(n)
plot(cumsum(x)/1:n, type = "l")
abline(h = 0.5)
se
se <- sqrt(cumsum(x) * cumsum(1 - x) / 1:n)/n
se
setwd("~/thesis/code-for-plots")
## slice plot for emulator ...
n = 20
y = matrix(ncol = 10, nrow = n)
for(i in 1:nrow(y)) {
for(j in 1:ncol(y)) {
location  = paste0("matlab-data/out-new227/OutputOuter", j, "-", i, ".mat")
tmp = R.matlab::readMat(location)
y[i,j]  = qnorm( mean( tmp$y[[j]][[1]] ) )
}
}
x = seq(from = 0.1, to = 5, length = n)
log_var_hat <- log(apply(y, 1, var))
plot(x, log_var_hat, pch = 20)
abline(lm(log_var_hat ~  x))
summary(lm(log_var_hat ~  (x)))
#36, 42, 53, 56, 63. 88, 92, 100, 108, 110, 121, 144, 147, 165, 169, 177, 180, 193, 203, 208,  227
## slice plot for emulator ...
n = 20
y = matrix(ncol = 10, nrow = n)
for(i in 1:nrow(y)) {
for(j in 1:ncol(y)) {
location  = paste0("matlab-data/out-new208/OutputOuter", j, "-", i, ".mat")
tmp = R.matlab::readMat(location)
y[i,j]  = qnorm( mean( tmp$y[[j]][[1]] ) )
}
}
x = seq(from = 0.1, to = 5, length = n)
log_var_hat <- log(apply(y, 1, var))
plot(x, log_var_hat, pch = 20)
abline(lm(log_var_hat ~  x))
summary(lm(log_var_hat ~  (x)))
#36, 42, 53, 56, 63. 88, 92, 100, 108, 110, 121, 144, 147, 165, 169, 177, 180, 193, 203, 208,  227
## slice plot for emulator ...
n = 20
y = matrix(ncol = 10, nrow = n)
for(i in 1:nrow(y)) {
for(j in 1:ncol(y)) {
location  = paste0("matlab-data/out-new203/OutputOuter", j, "-", i, ".mat")
tmp = R.matlab::readMat(location)
y[i,j]  = qnorm( mean( tmp$y[[j]][[1]] ) )
}
}
x = seq(from = 0.1, to = 5, length = n)
log_var_hat <- log(apply(y, 1, var))
plot(x, log_var_hat, pch = 20)
abline(lm(log_var_hat ~  x))
summary(lm(log_var_hat ~  (x)))
#36, 42, 53, 56, 63. 88, 92, 100, 108, 110, 121, 144, 147, 165, 169, 177, 180, 193, 203, 208,  227
## slice plot for emulator ...
n = 20
y = matrix(ncol = 10, nrow = n)
for(i in 1:nrow(y)) {
for(j in 1:ncol(y)) {
location  = paste0("matlab-data/out-new208/OutputOuter", j, "-", i, ".mat")
tmp = R.matlab::readMat(location)
y[i,j]  = qnorm( mean( tmp$y[[j]][[1]] ) )
}
}
x = seq(from = 0.1, to = 5, length = n)
log_var_hat <- log(apply(y, 1, var))
plot(x, log_var_hat, pch = 20)
abline(lm(log_var_hat ~  x))
summary(lm(log_var_hat ~  (x)))
#36, 42, 53, 56, 63. 88, 92, 100, 108, 110, 121, 144, 147, 165, 169, 177, 180, 193, 203, 208,  227
## slice plot for emulator ...
n = 20
y = matrix(ncol = 10, nrow = n)
for(i in 1:nrow(y)) {
for(j in 1:ncol(y)) {
location  = paste0("matlab-data/out-new227/OutputOuter", j, "-", i, ".mat")
tmp = R.matlab::readMat(location)
y[i,j]  = qnorm( mean( tmp$y[[j]][[1]] ) )
}
}
x = seq(from = 0.1, to = 5, length = n)
log_var_hat <- log(apply(y, 1, var))
plot(x, log_var_hat, pch = 20)
abline(lm(log_var_hat ~  x))
summary(lm(log_var_hat ~  (x)))
#36, 42, 53, 56, 63. 88, 92, 100, 108, 110, 121, 144, 147, 165, 169, 177, 180, 193, 203, 208,  227
#36, 42, 53, 56, 63. 88, 92, 100, 108, 110, 121, 144, 147, 165, 169, 177, 180, 193, 203, 208,  227
plot(x, log_var_hat, pch = 20,
main = "Estimated Log Variance of Probit Availability",
ylab  = "Log variance of probit availability",
xlab = "Time to degredation (generator)")
abline(lm(log_var_hat ~  x))
